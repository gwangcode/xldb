import stdwb as wb, commonstyle as cs, cellpath as cp 

# Help information
HelpInfo='''
set up style of cells
style .fname "Times New Roman" .fsize 12 ... a/Sheet1/B2

.left, .right, .top, .bottom, .diagonal, .horizontal, .vertical -> designate borders
.fname 'Times New Roman' -> font name
.!fname -> clear fname
.fbold, .fitalic, .fstrike, .foutline, .fshadow, .fcondense, .fextend, .funderline, . / .fbold  ... ! -> start bold
.!fbold, etc. -> stop bold
.@fbold, etc. -> print bold style
.clear font, fill, protection, ...
.!clear: clear all styles
'''
# Variables & Functions
la=len(args)
Side=None
Cell=''
ReadMark='@'
#AHorizontal=AVertical=ARotation=AWrap=AShrink=AIndent=ARIndent=AJLast=AROrder=PLock=PHide=Format=FName=FColor=FScheme=FSize=FVAlign=BColor=BStyle=FBold=FItalic=FStrike=FOutline=FShadow=FCondense=FExtend=FUnderline=Side=DiagUp=DiagDown=BOutline=None

# Parameter Options
BoolItems=('fbold', 'fitalic', 'fstrike', 'foutline', 'fshadow', 'fcondense', 'fextend', 'diagup', 'diagdown', 'boutline', 'awrap', 'ashrink', 'ajlast','plock', 'phide')
UnBoolItems=tuple(['!'+i for i in BoolItems])
ReadBoolItems=tuple(['@'+i for i in BoolItems])
StrItems=('fname',  'fsize', 'funderline', 'fvalign', 'fscheme', 'fcolor', 'bcolor', 'bstyle',  'ahorizontal', 'avertical', 'arotation', 'aindent', 'arindent',  'arorder', 'format', 'bfill', 'clear')
UnStrItems=tuple(['!'+i for i in StrItems])
ReadStrItems=tuple([ReadMark+i for i in StrItems])
opts, free=wb.parameter_parse(args, nkey=('help', 'left', 'right', 'top', 'bottom', 'diagonal', 'horizontal', 'vertical')+BoolItems+UnBoolItems, pkey=StrItems)

Paras={}
for i in StrItems: Paras.update({i: None})

if opts:
  for i in opts:
    if i[0]=='help': err(HelpInfo)
    elif i[0] in ('left', 'right', 'top', 'bottom', 'diagonal', 'horizontal', 'vertical'): Side=i[1]
    elif i[0] in StrItems: Paras[i[0]]=i[1]
    elif i[0] in BoolItems: Paras[i[0]]=True
    elif i[0] in UnBoolItems: Paras[i[0][1:]]=False
    elif i[0] in UnStrItems: Paras[i[0][1:]]=''
    elif i[0] in ReadStrItems+ReadBoolItems: Paras[i[0][1:]]=ReadMark

if free: 
  lf=len(free)
  if lf==2: Cell=free[1]
  else: err('Illegal parameters')
else: err('Illegal parameters')

# Main code
_Cell=cp.locate(Cell)
if not _Cell: err(Cell+' not exists')

Cell=_Cell
r={}
w, s, col1, row1, col2, row2=cp.locate(Cell, Array=True)
if not col2: col2=col1
if not row2: row2=row1
for icol in range(wb.col2num(col1),wb.col2num(col2)+1):
  for irow in range(int(row1), int(row2)+1):
    Cell=wb.compose(w, s, wb.num2col(icol)+str(irow))
    for i in Paras.keys():
      if Paras[i] is not None: 
        r.update({i:getattr(cs, i)(Cell, Paras[i])})
      elif Paras[i]==ReadMark: 
        printstyle={i:getattr(cs, i)(Cell)}
        cprint(printstyle)
        r.update(printstyle)



    if Paras['fname'] is not None: cs.fname(Cell, Paras['fname'])
    elif Paras['fname']==ReadMark: 
      printstyle={'fname':cs.fname(Cell)}
      cprint(printstyle)
      r.update(printstyle)

    if Paras['fbold'] is not None: cs.fbold(Cell, Paras['fbold'])
    elif Paras['fbold']==ReadMark: 
      printstyle={'fbold':cs.fbold(Cell)}
      cprint(printstyle)
      r.update(printstyle)

    if Paras['fitalic'] is not None: cs.fitalic(Cell, Paras['fitalic'])
    elif Paras['fitalic']==ReadMark: 
      printstyle={'fitalic':cs.fitalic(Cell)}
      cprint(printstyle)
      r.update(printstyle)

    if Paras['fstrike'] is not None: cs.fstrike(Cell, Paras['fstrike'])
    elif Paras['fstrike']==ReadMark: 
      printstyle={'fstrike':cs.fstrike(Cell)}
      cprint(printstyle)
      r.update(printstyle)

    if Paras['foutline'] is not None: cs.foutline(Cell, Paras['foutline'])
    elif Paras['foutline']==ReadMark: 
      printstyle={'foutline':cs.foutline(Cell)}
      cprint(printstyle)
      r.update(printstyle)

    if Paras['fshadow'] is not None: cs.fshadow(Cell, Paras['fshadow'])
    elif Paras['fshadow']==ReadMark: 
      printstyle={'fshadow':cs.fshadow(Cell)}
      cprint(printstyle)
      r.update(printstyle)

    if Paras['fcondense'] is not None: cs.fcondense(Cell, Paras['fcondense'])
    elif Paras['fcondense']==ReadMark: 
      printstyle={'fcondense':cs.fcondense(Cell)}
      cprint(printstyle)
      r.update(printstyle)

    if Paras['fextend'] is not None: cs.fextend(Cell, Paras['fextend'])
    elif Paras['fextend']==ReadMark: 
      printstyle={'fextend':cs.fextend(Cell)}
      cprint(printstyle)
      r.update(printstyle)

    if Paras['fsize'] is not None: cs.fsize(Cell, Paras['fsize'])
    elif Paras['fsize']==ReadMark: 
      printstyle={'fsize':cs.fsize(Cell)}
      cprint(printstyle)
      r.update(printstyle)

    if Paras['funderline'] is not None: cs.funderline(Cell, Paras['funderline'])
    elif Paras['funderline']==ReadMark: 
      printstyle={'funderline':cs.funderline(Cell)}
      cprint(printstyle)
      r.update(printstyle)

    if Paras['fvalign'] is not None: cs.fVertAlign(Cell, Paras['fvalign']) # fvalign -> fVertAlign
    elif Paras['fvalign']==ReadMark: 
      printstyle={'fvalign':cs.fVertAlign(Cell)}
      cprint(printstyle)
      r.update(printstyle)

    if Paras['fscheme'] is not None: cs.fscheme(Cell, Paras['fscheme'])
    elif Paras['fscheme']==ReadMark: 
      printstyle={'fscheme':cs.fscheme(Cell)}
      cprint(printstyle)
      r.update(printstyle)

    if Paras['fcolor'] is not None: cs.fscheme(Cell, Paras['fcolor'])
    elif Paras['fcolor']==ReadMark: 
      printstyle={'fcolor':cs.fcolor(Cell)}
      cprint(printstyle)
      r.update(printstyle)

    if Paras['bcolor'] is not None: 
      if Paras['bfill'] is not None: cs.bcolor(Cell, Paras['bcolor'], Paras['bfill'])
      else: cs.bcolor(Cell, Paras['bcolor'])
    elif Paras['bcolor']==ReadMark: 
      printstyle={'bcolor':cs.bcolor(Cell)}
      cprint(printstyle)
      r.update(printstyle)

    if Paras['bstyle'] is not None: 
      if Side=='left': cs.lbstyle(Cell, Paras['bstyle'])
      elif Side=='right': cs.rbstyle(Cell, Paras['bstyle'])
      elif Side=='top': cs.tbstyle(Cell, Paras['bstyle'])
      elif Side=='bottom': cs.bbstyle(Cell, Paras['bstyle'])
      elif Side=='diagonal': cs.dbstyle(Cell, Paras['bstyle'])
      elif Side=='horizontal': cs.hbstyle(Cell, Paras['bstyle'])
      elif Side=='vertical': cs.vbstyle(Cell, Paras['bstyle'])
    if Paras['bcolor'] is not None: 
      if Side=='left': cs.lcolor(Cell, Paras['bcolor'])
      elif Side=='right': cs.rbcolor(Cell, Paras['bcolor'])
      elif Side=='top': cs.tbcolor(Cell, Paras['bcolor'])
      elif Side=='bottom': cs.bbcolor(Cell, Paras['bcolor'])
      elif Side=='diagonal': cs.dbcolor(Cell, Paras['bcolor'])
      elif Side=='horizontal': cs.hbcolor(Cell, Paras['bcolor'])
      elif Side=='vertical': cs.vbcolor(Cell, Paras['bcolor'])
    if Paras['diagup'] is not None: cs.bDiagUp(Cell, Paras['diagup']) # dignup -> bDiagUp
    if Paras['diagdown'] is not None: cs.bDiagDown(Cell, Paras['diagdown']) # digndown -> bDiagDown
    if Paras['boutline'] is not None: cs.boutline(Cell, Paras['boutline'])
    if Paras['ahorizontal'] is not None: cs.ahorizontal(Cell, Paras['ahorizontal'])
    if Paras['avertical'] is not None: cs.avertical(Cell, Paras['avertical'])
    if Paras['arotation'] is not None: cs.arotation(Cell, Paras['arotation'])
    if Paras['awrap'] is not None: cs.awrap(Cell, Paras['awrap'])
    if Paras['ashrink'] is not None: cs.ashrink(Cell, Paras['ashrink'])
    if Paras['aindent'] is not None: cs.aindent(Cell, Paras['aindent'])
    if Paras['arindent'] is not None: cs.aRelativeIndent(Cell, Paras['arindent']) # arindent -> aRelativeIndent
    if Paras['ajlast'] is not None: cs.aJustifyLastLine(Cell, Paras['ajlast']) # ajlast -> aJustifyLastLine
    if Paras['arorder'] is not None: cs.aReadingOrder(Cell, Paras['arorder']) # arorder -> aReadingOrder
    if Paras['plock'] is not None: cs.plock(Cell, Paras['plock'])
    if Paras['phide'] is not None: cs.phide(Cell, Paras['phide'])
    if Paras['format'] is not None: cs.format(Cell, Paras['format'])
    if Paras['clear'] is not None: cs.clear(Cell, Paras['clear'])
    
    return r






  
    