import stdwb as wb, datetime, files, os

# Help information
HelpInfo='''
check if the China ID # is correct and try to replace it from the historical xlsx's as well as check duplicate ID's
check_id xlsx-file .from ~/Dropbox/Haitao_Outgoing_Goods/**/* .from ~/Dropbox/Zhongqiao_Outgoing_Goods/**/* ...
'''
# Variables & Functions
la=len(args)
FromList=[]
ID=''
File=''
# Parameter Options
opts, free=wb.parameter_parse(args, nkey=['help'], pkey=['from'])

if opts:
  for i in opts:
    if i[0]=='help': err(HelpInfo)
    elif i[0]=='from': FromList.append(i[1])
    

if free: 
  lf=len(free)
  if lf==2: File=free[1]
  else: err('Illegal parameters')
else: err('Illegal parameters')

# Main code
def checkID(ID):
  '''
  Returns True if IDStr is correct, Otherwise returns False
  '''
  ChkCode=(7,9,10,5,8,4,2,1,6,3,7,9,10,5,8,4,2)
  MatchCode={0:1, 1:0, 2:10, 3:9, 4:8, 5:7, 6:6, 7:5, 8:4, 9:3, 10:2}
  s=0
  
  
  if len(ID)==18: # check the decimals
    # check ID is made of numbers and/or xX
    for i in ID[:17]:
      if i not in '0123456789': return False
    if ID[17] not in '0123456789xX': return False
    # check ID is code is correct
    if ID[17] in ('X', 'x'): CheckCode=10
    else: CheckCode=int(ID[17])
    for Num, Code in zip(ID[:17], ChkCode): s+=int(Num)*Code
    if CheckCode==MatchCode[s%11]: return True
  return False


def Birthday_from_ID(ID):
  '''
  grab birthday from China ID
  returns (year, month, day)
  '''
  year=int(ID[6:10])
  month=int(ID[10:12])
  day=int(ID[12:14])
  return (year, month, day)



def calculate_age(born):
    today = datetime.date.today()
    return today.year - born.year - ((today.month, today.day) < (born.month, born.day))

def age(ID):
  '''
  calculate age from China ID
  returns age
  '''
  date_of_birth = datetime.datetime.strptime(ID[6:14], "%Y%m%d")
  return calculate_age(date_of_birth)

#Name=str(Name).strip()
#ID=str(ID).strip()

def strict_check_id(ID):
  if checkID(ID): 
    if age(ID)>=18:
      if age(ID)<=70: return 'Correct'
      
      else: return 'GreaterThan70'

    else: return 'LessThan18'

  else: return 'NotCorrect' # ID is not correct


# cprint(strict_check_id(ID))

$. close wkbk;
File=files.fpath(File)
if os.path.isfile(File):
  $. open =File .as wkbk;
  if 'wkbk' not in `.lw *;`: err(File+' unable to be opened')
else: err(File+' not exists')

# ID Database dict
IDdb={}
for fl in FromList:
  for f in files.walk(fl):
    if os.path.isfile(f) and f!=File:
      $. close w1;
      $. open =f .as w1;
      if 'w1' in `.lw *;`:
        IDList=$. fetch F K .from w1/Sheet1 .where True 
        IDdb.update(IDList)

$. close w1;

for i in range(2, `.shsize .row wkbk/Sheet1;`+1):
  Name=$. fetch .from ='wkbk/Sheet1/F'+str(i)
  Name=Name.strip()
  ID=$. fetch .from ='wkbk/Sheet1/K'+str(i)
  Chk=strict_check_id(str(ID).strip())
  if Chk!='Correct':
    if Name in IDdb: 
      ID=str(IDdb[Name]).strip()
      $. fetch =' '+ID .to ='wkbk/Sheet1/K'+str(i)
      ContentO=$. fetch .from ='wkbk/Sheet1/O'+str(i)
      if ContentO is None: ContentO=''
      else: ContentO=str(ContentO).strip()
      $. fetch "=ContentO+' <-Corrected ID'" .to ='wkbk/Sheet1/O'+str(i)
      cprint(str(i)+': '+Name+'('+str(ID)+') => '+Chk)
    else:
      ContentO=$. fetch .from ='wkbk/Sheet1/O'+str(i)
      if ContentO is None: ContentO=''
      else: ContentO=str(ContentO).strip()
      $. fetch "=[ContentO+' <- ID'+Chk, 'r']" .to ='wkbk/Sheet1/O'+str(i)
      cprint(str(i)+': '+Name+'('+str(ID)+') => '+Chk)

idx=$. idup wkbk/Sheet1/K .full;
if idx:
    idx=list(map(str, idx))
    for i in idx:
      ContentO=$. fetch .from ='wkbk/Sheet1/O'+str(i)
      if ContentO is None: ContentO=''
      else: ContentO=str(ContentO).strip()
      $. fetch "=[ContentO+' <- ID duplicate', 'r']" .to ='wkbk/Sheet1/O'+str(i)
      cprint(str(i)+': ID duplicate')
    

$. save wkbk;
$. close wkbk;





  
    